怎样学习C语言（献给迷茫的C爱好者）


一 ，怎样学习C语言

    很多人对学习C语言感到无从下手，经常问我同一个问题：究竟怎样学习C语言？我是一个教师，已经开发了很多年的程序，和很多刚刚起步的人一样，学习的第一个计算机语言就是C语言。经过这些年的开发，我深深的体会到C语言对于一个程序设计人员多么的重要，如果不懂C语言，你想写底层程序这几乎听起来很可笑，不懂C语言，你想写出优秀高效的程序，这简直就是天方夜谭。为什么C语言如此重要呢？ 

    第一:C语言语法结构很简洁精妙，写出的程序也很高效，很便于描述算法，大多数的程序员愿意使用C语言去描述算法本身，所以，如果你想在程序设计方面有所建树，就必须去学它。

    第二：C语言能够让你深入系统底层，你知道的操作系统，哪一个不是C语言写的？所有的windows,Unix,Linux,Mac,os/2，没有一个里外的，如果你不懂C语言，怎么可能深入到这些操作系统当中去呢？更不要说你去写它们的内核程序了。

    第三：很多新型的语言都是衍生自C语言，C++,Java,C#,J#,perl...哪个不是呢？掌握了C语言，可以说你就掌握了很多门语言，经过简单的学习，你就可以用这些新型的语言去开发了，这个再一次验证了C语言是程序设计的重要基础。还有啊，多说一点：即使现在招聘程序员，考试都是考C语言，你想加入it行业，那么就一定要掌握好C语言。

    那么究竟怎样学习C语言呢？

    1:工欲善其事，必先利其器
    这里介绍几个学习C语言必备的东东：
    一个开发环境，例如turbo C 2.0,这个曾经占据了DOS时代开发程序的大半个江山。但是现在windows时代，用turbo C有感觉不方面，编辑程序起来很吃力，并且拖放，更没有函数变量自动感应功能，查询参考资料也不方便。建议使用Visual C++,这个东西虽然比较大块头，但是一旦安装好了，用起来很方便。
    一本学习教程,现在C语言教材多如牛毛，但推荐大家使用《C语言程序设计》谭浩强主编 第二版 清华大学出版社，此书编写的很适合初学者，并且内容也很精到。
    除此以外，现在有很多辅助学习的软件，毕竟现在是Window时代了，学习软件多如牛毛，不象我们当初学习，只有读书做题这么老套。我向大家推荐一个“集成学习环境(C语言)”，里边的知识点总结和例程讲解都非常好，还有题库测试环境，据说有好几千题，甚至还有一个windows下的trubo C，初学者甚至不用装其它的编译器，就可以练习编程了,非常适合初学者。还有一个“C语言学习系统”软件，不过感觉只是一个题库系统，如果你觉得题做的不够，不妨也可以试试。

    2:葵花宝典
    学习计算机语言最好的方法是什么？答曰：读程序。
    没错，读程序是学习C语言入门最快，也是最好的方法。如同我，现在学习新的J#,C#等其他语言，不再是抱着书本逐行啃，而是学习它们的例程。当然，对于没有学过任何计算机语言的初学者，最好还是先阅读教程，学习完每一章，都要认真体会这一章的所有概念，然后不放过这一章中提到的所有例程，然后仔细研读程序，直到每一行都理解了，然后找几个编程题目，最好是和例程类似的或一样的，自己试图写出这段已经读懂的程序，不要以为例程你已经读懂了，你就可以写出和它一样的程序，绝对不一定，不相信你就试一试吧，如果写不出来，也不要着急，回过头来再继续研究例程，想想自己为什么写不出来，然后再去写这段程序，反反复复，直到你手到擒来为止，祝贺你，你快入门了。

    3：登峰造极
    写程序的最高境界其实就是掌握各种解决问题的手段(数据结构)和解决问题的方法(算法)。
    是不是写出底层程序就是程序设计高手呢？非也，写底层程序，无非是掌握了硬件的结构，况且硬件和硬件还不一样，要给一个芯片写驱动程序，无非就是掌握这块芯片的各种寄存器及其组合，然后写值读值，仅此而已。这不过是熟悉一些io函数罢了。那么怎样才算精通程序设计呢？怎样才能精通程序设计呢？举个例子：你面前有10个人，找出一个叫“张三”的人，你该怎么办？第一种方法：直接对这10个人问：“谁叫张三”。第2种方法：你挨个去问“你是不是张三？”，直到问到的这个人就是张三。第三种方法：你去挨个问一个人“你认不认识张三，指给我看”。不要小看这个问题，你说当然会选第一种方法，没错恭喜你答对了，因为这个方法最快，效率最高，但是在程序设计中找到解决问题的最优方法和你用的手段却是考验一个程序员程序设计水平的重要标志，而且是不容易达到的。刚才这个问题类似于数据结构和算法中的：Map数据结构，穷举查找和折半查找。所以掌握好数据结构和一些常用算法，是登峰造极的必然之路。最后给大家推荐严尉敏的《数据结构》清华大学出版社，希望每一个想成为程序设计高手的人研读此书。[编辑：赵晋军]


二，语言学习方法
  
　　谈谈偶的学习方法，抛砖引玉！
    学习不论讲不讲方法，最终都能学会。但是别人1个月学会了，而你却100年才学会，这不就晚了么？：）所以说，学习还是要讲究方法的。学习方法正确，事半功倍；学习方法不正确，事倍而功半。

什么才是学习C语言的捷径？我的答案是看书。书中所写，是前人数十年经验所写，看十本书，就相当于汲取了前人数十年的功力，那么你的内功也会迅速上升1甲子。：）书当然要看好书，只有好书才营养丰富。假如你花了1天时间看了一本破书，而该书介绍的知识虽然对于你来说是全新的知识，但是由于书中组织不当、或者深度不够，使你获取的营养很少，还不如自己研究一天来的快，这种书就不值当看了。学习C语言要看那些好书？我认为首先要把基础书给看扎实了，比如《C语言之四书五经》中介绍的4本。（虽然这些书很多已经绝版了，但我相信电子版也是很有益处。况且，如果你真的想看，我相信你一定有办法搞的到。）这些书你会在很短的时间内看完（比如一两个月），这取决于你的基础和悟性。之后要看那些书呢？我不妨再列几本。Bjarne Stroustrup的《C++程序设计语言》（The C++ Programming Language）一定要看，这本书里面对于C的一些基础概念的定义，比我见过的其他任何C语言书都要全，都要仔细；Bjarne Stroustrup的《C++语言的设计与演化》（The Design and Evolution of C++）和David R.Hanson 的《C语言接口与实现 创建可重用软件的技术》（C Interfaces and Implaementations Techniques for Creating Reusable Software）一定要看，这两本书讲述了如何用C来实现异常处理、实现类型的封装和扩展等一些大的项目中经常用到的高级技术。其他的书，操作系统的要看，编译原理的要看，算法的要看，模式的也要看。读书破万卷，coding如有神。总而言之，就如《传》中云：“生而知之者，上也；学而知之者，次也；困而学之又其次也。”我们不能总是因困而学之，而要做到兵马未动，粮草先行。
    看书是学习的导向，书中能一一介绍清楚概念，但书却不能把应用的细节一一介绍给你，因为应用总是招数繁复，变化多端。因此我们要想熟悉招数，懂得书中所讲怎么使用，还要多读源码。Linus给别人解答问题的时候，常说Read the fucking source code；候捷也在其文中提到“源码之前，了无秘密。”这就是大师的箴言呀。源码就像是动画、就像是幻灯片，把书中的招式一一演练给你看。可以说高手的经验大都是源自代码。源码和书一样，也是要看好的，不要看差的。在此，我推荐看Linux kernel source code 和 Linux tcp/ip source code。这两套代码都是开源的，垂手可得。此外，还可以配合着Andrew S.Tanenbaum的《操作系统的设计与实现》(Operating Systems：Design and Implementation)、毛德操 胡希明的《Linux内核 源代码情景分析》、Jonathan Corbet,Alessandro Rubini,Greg Kroah-Hartman合著的《Linux设备驱动程序》（Linux Device Driver,3e）、W.Richard Stevens《TCP/IP详解（3部）》 (TCP/IP Illustracted )、W.Richard Stevens《UNIX环境高级编程》（Advanced Programming in the UNIX Environment，新版增加了Linux kernel的内容）等书来看，方便的很 当然程序不是看出来的，是写出来的。我高中的时候每天坚持写6个小时程序，《数据结构》和排列组合、图论方面的习题反复做了N遍。到现在虽然已经时隔五六年，很多内容早已淡忘掉，但却培养了我很强的编码能力和调试能力，直到现在还对我的工作有很大的帮助。

    学习忌贪多、忌浮躁、忌急功近利、忌目中无人。把学习计划放的长一些，培养一个好的学习方法，一步一步慢慢走，终能成为高手。